from actions.xai_icfts import icfts_explanation
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import joblib
import pandas as pd
import logging
import os
from lime.lime_tabular import LimeTabularExplainer
import numpy as np
# from xai_icfts import icfts_explanation

# Thi·∫øt l·∫≠p logging
logger = logging.getLogger(__name__)
print("Imported icfts_explanation:", icfts_explanation)
class ActionPredictHeartDisease(Action):
    def name(self) -> Text:
        return "action_predict_heart_disease"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        try:
            # Load trained model - ki·ªÉm tra file t·ªìn t·∫°i tr∆∞·ªõc
            model_path = r'D:\Pycharm\chat\rasa-backend\models\heart_disease_model_logistic.pkl'
            if not os.path.exists(model_path):
                raise FileNotFoundError(f"Model file not found at {model_path}")

            model = joblib.load(model_path)

            # L·∫•y th√¥ng tin t·ª´ slots
            slot_mapping = {
                'age': ("age", float),
                'sex': ("sex", int),
                'cp': ("chest_pain_type", int),
                'trestbps': ("resting_bp", float),
                'chol': ("cholesterol", float),
                'fbs': ("fasting_blood_sugar", int),
                'restecg': ("resting_ecg", int),
                'thalach': ("max_heart_rate", float),
                'exang': ("exercise_angina", int),
                'oldpeak': ("st_depression", float),
                'slope': ("st_slope", int),
                'ca': ("num_major_vessels", int),
                'thal': ("thalassemia", int)
            }

            slots = {}
            missing = []

            for feature, (slot_name, dtype) in slot_mapping.items():
                slot_value = tracker.get_slot(slot_name)
                if slot_value is None:
                    missing.append(slot_name)
                    continue

                try:
                    # Chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu
                    slots[feature] = dtype(slot_value)
                except (ValueError, TypeError) as e:
                    logger.error(f"Error converting slot {slot_name} to {dtype}: {e}")
                    missing.append(slot_name)

            # Ki·ªÉm tra thi·∫øu th√¥ng tin
            if missing:
                dispatcher.utter_message(
                    text=f"Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng th√¥ng tin v·ªÅ: {', '.join(missing)}. Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c."
                )
                return []

            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
            input_data = pd.DataFrame([slots])

            # √Åp d·ª•ng one-hot encoding cho c√°c bi·∫øn ph√¢n lo·∫°i
            categorical_cols = ['cp', 'restecg', 'slope', 'thal']
            input_data = pd.get_dummies(input_data, columns=categorical_cols)

            # Ki·ªÉm tra v√† th√™m c√°c c·ªôt c√≤n thi·∫øu
            try:
                expected_cols = model.feature_names_in_  # Thay v√¨ model.named_steps[...]
                for col in expected_cols:
                    if col not in input_data.columns:
                        input_data[col] = 0

                # S·∫Øp x·∫øp ƒë√∫ng th·ª© t·ª±
                input_data = input_data[expected_cols]
            except AttributeError as e:
                logger.error(f"Error processing model features: {e}")
                dispatcher.utter_message(
                    text="C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o. Vui l√≤ng th·ª≠ l·∫°i sau."
                )
                return []

            # D·ª± ƒëo√°n
            try:
                probability = model.predict_proba(input_data)[0][1]
                risk_score = int(round(probability * 100))  # L√†m tr√≤n v√† chuy·ªÉn th√†nh ph·∫ßn trƒÉm

                # Ph√¢n lo·∫°i nguy c∆° v·ªõi ng∆∞·ª°ng t√πy ch·ªânh
                risk_level, recommendation = self._assess_risk(probability)

                # Ph·∫£n h·ªìi chi ti·∫øt
                message = (
                    f"K·∫øt qu·∫£ ƒë√°nh gi√° nguy c∆° b·ªánh tim:\n\n"
                    f"üìä X√°c su·∫•t: {probability * 100:.1f}%\n"
                    f"‚ö†Ô∏è M·ª©c ƒë·ªô nguy c∆°: {risk_level}\n"
                    f"üí° Khuy·∫øn ngh·ªã: {recommendation}\n\n"
                    f"L∆∞u √Ω: ƒê√¢y ch·ªâ l√† d·ª± ƒëo√°n t·ª± ƒë·ªông, kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n c·ªßa b√°c sƒ©."
                )
                # --- Ph·∫ßn gi·∫£i th√≠ch ICFTS ---
                dispatcher.utter_message(text=message)
                feature_names = model.feature_names_in_.tolist()
                explanation = icfts_explanation(model, feature_names, top_n=3)
                dispatcher.utter_message(text=explanation)
                # -----------------------------
                # ====== LIME explanation ======

                # T·∫°o explainer (gi·∫£ ƒë·ªãnh model l√† logistic regression, input l√† s·ªë li·ªáu d·∫°ng numpy)
                explainer = LimeTabularExplainer(
                    training_data=np.array(input_data),
                    # D√πng ch√≠nh input_data l√†m training_data cho ƒë∆°n gi·∫£n, th·ª±c t·∫ø n√™n d√πng data train g·ªëc
                    feature_names=expected_cols,
                    class_names=["Kh√¥ng b·ªã b·ªánh", "B·ªánh tim"],
                    discretize_continuous=True
                )

                exp = explainer.explain_instance(
                    data_row=input_data.iloc[0].values,
                    predict_fn=model.predict_proba,
                    num_features=3
                )

                # L·∫•y gi·∫£i th√≠ch d·∫°ng text
                lime_exp = "üí° LIME gi·∫£i th√≠ch c√°c ƒë·∫∑c tr∆∞ng ·∫£nh h∆∞·ªüng:\n"
                for feature, weight in exp.as_list():
                    direction = "tƒÉng" if weight > 0 else "gi·∫£m"
                    lime_exp += f"- {feature}: tr·ªçng s·ªë {weight:.3f} ‚Üí c√≥ xu h∆∞·ªõng {direction} nguy c∆°\n"

                dispatcher.utter_message(text=lime_exp)

                # ===============================

                # C·∫≠p nh·∫≠t risk_score v√†o slot
                return [SlotSet("risk_score", risk_score)]

            except Exception as e:
                logger.error(f"Prediction error: {e}")
                dispatcher.utter_message(
                    text="C√≥ l·ªói x·∫£y ra khi d·ª± ƒëo√°n. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ho·∫∑c th·ª≠ l·∫°i sau."
                )
                return []

        except Exception as e:
            logger.error(f"Unexpected error: {e}", exc_info=True)
            dispatcher.utter_message(
                text="Xin l·ªói, c√≥ l·ªói h·ªá th·ªëng x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."
            )
            return []

    def _assess_risk(self, probability: float) -> tuple:
        """Ph√¢n lo·∫°i nguy c∆° v√† ƒë∆∞a ra khuy·∫øn ngh·ªã"""
        if probability >= 0.75:
            return (
                "r·∫•t cao",
                "B·∫°n c√≥ nguy c∆° r·∫•t cao m·∫Øc b·ªánh tim. N√™n ƒëi kh√°m b√°c sƒ© chuy√™n khoa tim m·∫°ch ngay."
            )
        elif probability >= 0.6:
            return (
                "cao",
                "B·∫°n c√≥ nguy c∆° cao. N√™n ƒë·∫∑t l·ªãch kh√°m b√°c sƒ© s·ªõm v√† l√†m c√°c x√©t nghi·ªám chuy√™n s√¢u."
            )
        elif probability >= 0.4:
            return (
                "trung b√¨nh",
                "B·∫°n c√≥ nguy c∆° ·ªü m·ª©c trung b√¨nh. N√™n ƒëi kh√°m t·ªïng qu√°t v√† thay ƒë·ªïi l·ªëi s·ªëng."
            )
        elif probability >= 0.2:
            return (
                "th·∫•p",
                "Nguy c∆° th·∫•p nh∆∞ng v·∫´n c·∫ßn theo d√µi. Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh v√† ki·ªÉm tra ƒë·ªãnh k·ª≥."
            )
        else:
            return (
                "r·∫•t th·∫•p",
                "Nguy c∆° r·∫•t th·∫•p. Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng khoa h·ªçc ƒë·ªÉ b·∫£o v·ªá s·ª©c kh·ªèe tim m·∫°ch."
            )